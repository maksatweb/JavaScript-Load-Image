{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# JavaScript Load Image\r\n\r\n## Demo\r\n[JavaScript Load Image Demo](http://blueimp.github.com/JavaScript-Load-Image/)\r\n\r\n## Usage\r\nInclude the (minified) JavaScript Load Image script in your HTML markup:\r\n\r\n```html\r\n<script src=\"load-image.min.js\"></script>\r\n```\r\n\r\nIn your application code, use the **loadImage()** function like this:\r\n\r\n```js\r\ndocument.getElementById('file-input').onchange = function (e) {\r\n    window.loadImage(\r\n        e.target.files[0],\r\n        function (img) {\r\n            document.body.appendChild(img);\r\n        },\r\n        {width: 600}\r\n    );\r\n};\r\n```\r\n\r\n## Requirements\r\nThe JavaScript Load Image function has zero dependencies.\r\n\r\nHowever, JavaScript Load Image is a very suitable complement to the [Canvas to Blob](https://github.com/blueimp/JavaScript-Canvas-to-Blob) function.\r\n\r\n## API\r\nThe **loadImage()** function accepts a [File](https://developer.mozilla.org/en/DOM/File) or [Blob](https://developer.mozilla.org/en/DOM/Blob) object or a simple image URL (e.g. \"http://example.org/image.png\") as first argument.\r\n\r\nIf a [File](https://developer.mozilla.org/en/DOM/File) or [Blob](https://developer.mozilla.org/en/DOM/Blob) is passed as parameter, it returns a HTML **img** element if the browser supports the [URL](https://developer.mozilla.org/en/DOM/window.URL) API or a [FileReader](https://developer.mozilla.org/en/DOM/FileReader) object if supported, or **false**.  \r\nIt always returns a HTML **img** element when passing an image URL:\r\n\r\n```js\r\ndocument.getElementById('file-input').onchange = function (e) {\r\n    var loadingImage = window.loadImage(\r\n        e.target.files[0],\r\n        function (img) {\r\n            document.body.appendChild(img);\r\n        },\r\n        {width: 600}\r\n    );\r\n    if (!loadingImage) {\r\n        // Alternative code ...\r\n    }\r\n};\r\n```\r\n\r\nThe **img** element or [FileReader](https://developer.mozilla.org/en/DOM/FileReader) object returned by the **loadImage()** function allows to abort the loading process by setting the **onload** and **onerror** event handlers to null:\r\n\r\n```js\r\ndocument.getElementById('file-input').onchange = function (e) {\r\n    var loadingImage = window.loadImage(\r\n        e.target.files[0],\r\n        function (img) {\r\n            document.body.appendChild(img);\r\n        },\r\n        {width: 600}\r\n    );\r\n    loadingImage.onload = loadingImage.onerror = null;\r\n};\r\n```\r\n\r\nThe second argument must be a **callback** function, which is called when the image has been loaded or an error occurred while loading the image. The callback function is passed one argument, which is either a HTML **img** element, a [canvas](https://developer.mozilla.org/en/HTML/Canvas) element, or an [Event](https://developer.mozilla.org/en/DOM/event) object of type \"**error**\":\r\n\r\n```js\r\nvar imageUrl = \"http://example.org/image.png\";\r\nwindow.loadImage(\r\n    imageUrl,\r\n    function (img) {\r\n        if(img.type === \"error\") {\r\n            console.log(\"Error loading image \" + imageUrl);\r\n        } else {\r\n            document.body.appendChild(img);\r\n        }\r\n    },\r\n    {width: 600}\r\n);\r\n```\r\n\r\nThe optional third argument is a map of options:\r\n\r\n* **width**: Defines the width of the img/canvas element.\r\n* **height**: Defines the height of the img/canvas element.\r\n* **crop**: Defines croping of the canvas element. (for now works only for canvas)\r\n* **upscale**: Define upscaling of the img/canvas element.\r\n* **canvas**: Defines if the returned element should be a [canvas](https://developer.mozilla.org/en/HTML/Canvas) element.\r\n* **noRevoke**: By default, the [created object URL](https://developer.mozilla.org/en/DOM/window.URL.createObjectURL) is revoked after the image has been loaded, except when this option is set to *true*.\r\n\r\nThey can be used the following way:\r\n\r\n```js\r\nwindow.loadImage(\r\n    fileOrBlobOrUrl,\r\n    function (img) {\r\n        document.body.appendChild(img);\r\n    },\r\n    {\r\n        width: 600,\r\n        height: 300,\r\n        crop: true,\r\n        upsacel: true,\r\n        canvas: true,\r\n        noRevoke: true\r\n    }\r\n);\r\n```\r\n\r\nAll settings are optional. By default, the image is returned as HTML **img** element without any image size restrictions.\r\n\r\n## License\r\nThe JavaScript Load Image script is released under the [MIT license](http://www.opensource.org/licenses/MIT).\r\n","name":"Javascript-load-image","tagline":"JavaScript Load Image is a function to load images provided as File or Blob objects or via URL. It returns an optionally scaled HTML img or canvas element.","google":""}